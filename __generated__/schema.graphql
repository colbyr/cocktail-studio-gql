### This file was generated by Nexus Schema
### Do not make changes to this file directly


enum AmountScale {
  dash
  drop
  floz
  g
  mL
  one
  oz
}

type Ingredient {
  description: String!
  directions: String!
  generatedDescription: String!
  id: ID!
  name: String!
  recipeIngredients: [RecipeIngredient!]!
  recipes: [Recipe!]!
  recipesCount: Int!
  summary: String!
  typeOf: Ingredient
  typeOfPath: [Ingredient!]!
  types: [Ingredient!]!
  uri: String!
}

union LoginResult = LoginResultFailure | LoginResultSuccess

type LoginResultFailure {
  reason: String!
}

type LoginResultSuccess {
  token: String!
  userId: ID!
}

type Mutation {
  createIngredient(description: String, directions: String, name: String!, typeOfIngredientName: String): Ingredient!
  createRecipe(description: String, directions: String, name: String!, recipeIngredients: [RecipeIngredientInput!]!): Recipe!
  deleteIngredients(ingredientIds: [ID!]!): [ID!]!
  deleteRecipes(recipeIds: [ID!]!): [ID!]!

  """Import a recipe from arbitrary text"""
  importRecipe(recipeText: String!): RecipeImport!

  """Import recipe a from a cocktailstudio share url"""
  importSharedRecipe(recipeUrl: String!): RecipeImport!
  login(email: String!, password: String!): LoginResult!
  loginAnonymous: LoginResult!
  signup(email: String!, password: String!): LoginResult!
  updateIngredient(description: String, directions: String, ingredientId: ID!, name: String!, typeOfIngredientName: String): Ingredient!
  updateRecipe(description: String, directions: String, name: String!, recipeId: ID!, recipeIngredients: [RecipeIngredientInput!]!): Recipe!
}

type Query {
  me: User!
}

type Recipe {
  description: String!
  directions: String!
  id: ID!
  name: String!
  recipeIngredients: [RecipeIngredient!]!
  summary: String!
  uri: String!
}

type RecipeImport {
  description: String
  directions: String
  name: String!
  recipeIngredients: [RecipeImportIngredient!]!
}

type RecipeImportIngredient {
  amount: Float!
  amountScale: AmountScale!
  ingredientName: String!
}

type RecipeIngredient {
  amount: Float!
  amountScale: AmountScale!
  id: ID!
  ingredient: Ingredient!
  recipe: Recipe!
}

input RecipeIngredientInput {
  amount: Float!
  amountScale: AmountScale!
  ingredientName: String!
}

type User {
  email: String
  id: ID!
  ingredientById(ingredientId: ID!): Ingredient
  ingredients: [Ingredient!]!
  recipeById(recipeId: ID!): Recipe
  recipes: [Recipe!]!
  recipesDeletedSince(since: String!): [Recipe!]!
  recipesUpdatedSince(since: String!): [Recipe!]!
}